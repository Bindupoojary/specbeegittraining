<?php

/**
 * @file
 * To define and manage database schema.
 */

namespace Drupal\binduu_exercise;

/**
 * @file
 * To define and manage database schema.
 */

use Drupal\node\Entity\Node;

/**
 * @file
 * To define and manage database schema.
 */

/**
 * Implements hook_schema().
 */
function binduu_exercise_schema() {
  // This function creates table user_details in the database.
  // The argument along with table name.
  // And inside the array mention all the details about the table.
  $schema['user_details'] = [
  // The field and the field description.
    'description' => 'Contains user details',
    'fields' => [
      'id' => [
        'description' => 'holds id',
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'firstname' => [
        // The field and the field description.
        'description' => 'Firstname of the user',
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
      ],
      'email' => [
        // The field and the field description.
        'description' => 'Email of the user',
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
      ],
      'gender' => [
        // The field and the field description.
        'description' => 'gender of the user',
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
      ],
    ],
      // The primary key field.
    'primary key' => ['id'],
  ];
  return $schema;
}

/*
 * Implement hook_update_N().
 */

/**
 * Make change on config form.
 */
function binduu_exercise_update_100903() {
  $config = \Drupal::configFactory()->getEditable('binduu_exercise.settings');
  $config->set('email', 'binxyz@gmail.com');
  $config->save();
}

/**
 * Setup tags field_test Form display.
 */
function binduu_exercise_update_100905() {
  $field_name = 'field_test';
  $properties = [
    'targetEntityType' => 'taxonomy_term',
    'bundle' => 'tags',
  ];
  if ($form_displays = \Drupal::entityTypeManager()->getStorage('entity_form_display')->loadByProperties($properties)) {
    foreach ($form_displays as $form_display) {
      $form_display_config = [
        'type' => 'string_textfield',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 1,
      ];
      $form_display->setComponent($field_name, $form_display_config);
      $form_display->save();
    }
  }
}

/**
 * Setup TAGS field_test View display.
 */
function binduu_exercise_update_100907() {
  $field_name = 'field_test';
  $properties = [
    'targetEntityType' => 'taxonomy_term',
    'bundle' => 'tags',
  ];
  if ($view_displays = \Drupal::entityTypeManager()->getStorage('entity_view_display')->loadByProperties($properties)) {
    foreach ($view_displays as $view_display) {
      $view_display_config = [
        'label' => 'above',
        'region' => 'hidden',
      ];
      $view_display->setComponent($field_name, $view_display_config);
      $view_display->save();
    }
  }
}

/**
 * Implements hook_update_N().
 */
function binduu_exercise_update_100901() {
  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'basic page');
  $nids = $query->execute();
  $nodes = Node::loadMultiple($nids);
  foreach ($nodes as $node) {
    $node->setTitle(strtoupper($node->getTitle()));
    $node->save();
  }
  \Drupal::messenger()->addMessage('page titles updated');
}


/**
 * Implements hook_update_N().
 *
 * Create the tables for country, state, and district.
 */
function binduu_exercise_update_100413() {
  $schema = Database::getConnection()->schema();
  $connection = Database::getConnection();

  // Create country table.
  if (!$schema->tableExists('country')) {
    $table = [
      'description' => 'Country table',
      'fields' => [
        'id' => [
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'name' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ],
      ],
      'primary key' => ['id'],
    ];
    $schema->createTable('country', $table);
  }

  // Create state table.
  if (!$schema->tableExists('state')) {
    $table = [
      'description' => 'State table',
      'fields' => [
        'id' => [
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'country_id' => [
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'Foreign key to country table',
        ],
        'name' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ],
      ],
      'primary key' => ['id'],
      'foreign keys' => [
        'country_id' => [
          'table' => 'country',
          'columns' => ['country_id' => 'id'],
        ],
      ],
    ];
    $schema->createTable('state', $table);
  }

  // Create district table.
  if (!$schema->tableExists('district')) {
    $table = [
      'description' => 'District table',
      'fields' => [
        'id' => [
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'state_id' => [
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'Foreign key to state table',
        ],
        'name' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ],
      ],
      'primary key' => ['id'],
      'foreign keys' => [
        'state_id' => [
          'table' => 'state',
          'columns' => ['state_id' => 'id'],
        ],
      ],
    ];
    $schema->createTable('district', $table);
  }

  // Insert values into the country table.
  $connection->insert('country')
    ->fields(['name'])
    ->values(['India'])
    ->values(['USA'])
    ->execute();

  // Insert values into the state table.
  $connection->insert('state')
    ->fields(['country_id', 'name'])
    ->values([1, 'Karnataka'])
    ->values([1, 'kerala'])
    ->values([2, 'Texas'])
    ->execute();

  // Insert values into the district table.
  $connection->insert('district')
    ->fields(['state_id', 'name'])
    ->values([1, 'Bengaluru'])
    ->values([1, 'mysuru'])
    ->values([2, 'Austin'])
    ->values([2, 'Houston'])
    ->execute();
}
